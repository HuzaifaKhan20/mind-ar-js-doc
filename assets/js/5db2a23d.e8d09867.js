(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{134:function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,h=p["".concat(i,".").concat(m)]||p[m]||u[m]||o;return n?a.a.createElement(h,c(c({ref:t},l),{},{components:n})):a.a.createElement(h,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},137:function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return i}));var r=n(16),a=n(138);function o(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(r.default)();return{withBaseUrl:(n,r)=>function(e,t,n,{forcePrependBaseUrl:r=!1,absolute:o=!1}={}){if(!n)return n;if(n.startsWith("#"))return n;if(Object(a.b)(n))return n;if(r)return t+n;const i=n.startsWith(t)?n:t+n.replace(/^\//,"");return o?e+i:i}(t,e,n,r)}}function i(e,t={}){const{withBaseUrl:n}=o();return n(e,t)}},138:function(e,t,n){"use strict";function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!r(e)}n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return a}))},97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),o=(n(0),n(134)),i=n(137),c={id:"events-handling",title:"Events Handling",sidebar_label:"Events Handling"},s={unversionedId:"face-tracking-examples/events-handling",id:"face-tracking-examples/events-handling",isDocsHomePage:!1,title:"Events Handling",description:"This example demonstrates how to handle events from MindAR engine. It also explains how to programatically control the lifecycle of AR engine, including start, stop and switching camera.",source:"@site/docs/face-tracking-examples/events-handling.md",slug:"/face-tracking-examples/events-handling",permalink:"/mind-ar-js-doc/face-tracking-examples/events-handling",version:"current",sidebar_label:"Events Handling",sidebar:"docs",previous:{title:"Virtual Try-On",permalink:"/mind-ar-js-doc/face-tracking-examples/tryon"},next:{title:"React",permalink:"/mind-ar-js-doc/more-examples/react"}},l=[{value:"Try it out",id:"try-it-out",children:[]},{value:"Source",id:"source",children:[]},{value:"arSystem",id:"arsystem",children:[]},{value:"Events",id:"events",children:[{value:"<code>arReady</code>",id:"arready",children:[]},{value:"<code>arError</code>",id:"arerror",children:[]},{value:"<code>targetFound</code> and <code>targetLost</code>",id:"targetfound-and-targetlost",children:[]}]}],d={toc:l};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.a)("wrapper",Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(o.a)("p",null,"This example demonstrates how to handle events from MindAR engine. It also explains how to programatically control the lifecycle of AR engine, including start, stop and switching camera."),Object(o.a)("p",null,"The full source code is attached first and we will go through them one by one."),Object(o.a)("h2",{id:"try-it-out"},"Try it out"),Object(o.a)("a",{href:Object(i.a)("/face-tracking-samples/events.html"),target:"_blank"},"Live Demo"),Object(o.a)("h2",{id:"source"},"Source"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},'<html>\n  <head>\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <script src="https://cdn.jsdelivr.net/gh/hiukim/mind-ar-js@1.0.0/dist/mindar-face.prod.js"><\/script>\n    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"><\/script>\n    <script src="https://cdn.jsdelivr.net/gh/hiukim/mind-ar-js@1.0.0/dist/mindar-face-aframe.prod.js"><\/script>\n\n    <script>\n      document.addEventListener("DOMContentLoaded", function() {\n    const sceneEl = document.querySelector(\'a-scene\');\n    const arSystem = sceneEl.systems["mindar-face-system"];\n\n    const startButton = document.querySelector("#example-start-button");\n    const stopButton = document.querySelector("#example-stop-button");\n    const switchCameraButton = document.querySelector("#example-switch-camera-button");\n\n    // arReady event triggered when ready\n        sceneEl.addEventListener("arReady", (event) => {\n      console.log("ar ready");\n        });\n\n    // detect target found\n        sceneEl.addEventListener("targetFound", event => {\n          console.log("target found");\n        });\n\n    // detect target lost\n        sceneEl.addEventListener("targetLost", event => {\n          console.log("target lost");\n        });\n\n    // arError event triggered when something went wrong. Mostly browser compatbility issue\n        sceneEl.addEventListener("arError", (event) => {\n      console.log("ar error");\n        });\n\n    startButton.addEventListener(\'click\', () => {\n      arSystem.start(); // start AR \n        });\n    stopButton.addEventListener(\'click\', () => {\n      arSystem.stop(); // stop\n    });\n    switchCameraButton.addEventListener(\'click\', () => {\n      arSystem.switchCamera();\n    });\n      });\n    <\/script>\n   \n    <style>\n      body {\n        margin: 0;\n      }\n      .example-container {\n        overflow: hidden;\n        position: absolute;\n        width: 100%;\n        height: 100%;\n      }\n\n      #example-control-overlay {\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: none;\n    height: 30px;\n    z-index: 2;\n      }\n      #example-control-overlay >div {\n    position: absolute;\n    right: 0;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div class="example-container">\n      <div id="example-control-overlay" class="overlay">\n    <div>\n      <button id="example-start-button">Start</button>\n      <button id="example-stop-button">Stop</button>\n      <button id="example-switch-camera-button">Switch Camera</button>\n    </div>\n      </div>\n\n      <a-scene mindar-face="autoStart: false" embedded color-space="sRGB" renderer="colorManagement: true, physicallyCorrectLights" vr-mode-ui="enabled: false" device-orientation-permission-ui="enabled: false">\n        <a-camera active="false" position="0 0 0" look-controls="false"></a-camera>\n\n        <a-entity mindar-face-target="anchorIndex: 1">\n      <a-sphere color="green" radius="0.1"></a-sphere>\n        </a-entity>\n      </a-scene>\n    </div>\n  </body>\n</html>\n\n')),Object(o.a)("h2",{id:"arsystem"},"arSystem"),Object(o.a)("p",null,"The first thing to introduce is the ",Object(o.a)("inlineCode",{parentName:"p"},"arSystem")," component. It's embedded inside ",Object(o.a)("inlineCode",{parentName:"p"},"a-scene")," and you can get the object by the following:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"const sceneEl = document.querySelector('a-scene');\nconst arSystem = sceneEl.systems[\"mindar-face-system\"];\n")),Object(o.a)("p",null,Object(o.a)("inlineCode",{parentName:"p"},"arSystem")," provides a few api call to control the engine lifecycle "),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"arSystem.start(); // start the engine \narSystem.stop(); // stop the engine\narSystem.switchCamera(); // switch between front/back cameras\n")),Object(o.a)("p",null,"By default, AR engine will start immediately, but you can disable the auto start by giving a param ",Object(o.a)("inlineCode",{parentName:"p"},"autoStart: false")," inside ",Object(o.a)("inlineCode",{parentName:"p"},"<a-scene>")),Object(o.a)("h2",{id:"events"},"Events"),Object(o.a)("p",null,"MindAR will fire the events when the followings happen:"),Object(o.a)("h3",{id:"arready"},Object(o.a)("inlineCode",{parentName:"h3"},"arReady")),Object(o.a)("p",null,"After ",Object(o.a)("inlineCode",{parentName:"p"},"arSystem.start()"),", or autostart, AR engine needs to boot up, when it's ready, this event will be fired up. You can listen to this event throught the scene element"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},'const sceneEl = document.querySelector(\'a-scene\');\nsceneEl.addEventListener("arReady", (event) => {\n  // console.log("MindAR is ready")\n});\n')),Object(o.a)("h3",{id:"arerror"},Object(o.a)("inlineCode",{parentName:"h3"},"arError")),Object(o.a)("p",null,"Sometimes, AR engine might be failed to start. There could be many reasons, but one most likely reason is camera failed to start. When this happens, this event will be fired up."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},'const sceneEl = document.querySelector(\'a-scene\');\nsceneEl.addEventListener("arError", (event) => {\n  // console.log("MindAR failed to start")\n});\n')),Object(o.a)("h3",{id:"targetfound-and-targetlost"},Object(o.a)("inlineCode",{parentName:"h3"},"targetFound")," and ",Object(o.a)("inlineCode",{parentName:"h3"},"targetLost")),Object(o.a)("p",null,"This events are fired up when a face is detected/lost. You can listen to these events through the ",Object(o.a)("inlineCode",{parentName:"p"},"<a-entity>")),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},'sceneEl.addEventListener("targetFound", event => {\n  console.log("target found");\n});\n\nsceneEl.addEventListener("targetLost", event => {\n  console.log("target lost");\n});\n\n')))}u.isMDXComponent=!0}}]);